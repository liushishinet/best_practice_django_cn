随时考虑性能问题，而不要堆积到一起 profile first, then optimize

多看模型查询和模版的标签，并了解

让Django支持数据库长连接 据说可以提高性能

数据库性能最需要选择正确的类型、锁，为常用查询建立合适的索引

querySet 属于懒加载

将querySet 赋给变量进行结果缓存

遍历庞大集合内存会消耗很多，可以使用 iterator()

数据库能做的尽量不要用querySet来做，比如filter，exclude
用annotaion进行aggregation操作 ，用F来查询复杂条件，甚至使用RawSQL

尽量通过index或者unique键来取唯一结果

当需要外键的时候，通过Use QuerySet.select_related() 和 prefetch_related() 取得外键
个人推荐使用prefetch_related() 

使用 querySet.count() 而不是 len(queryset)

使用  querySet.exists() 而不是 if queryset 来判断是否有满足条件的对象存在 

如果只使用外键id的话 用entry.blog_id 代替 entry.blog.id

当不需要ORM模型对象的特性的时候，尽量使用QuerySet.values() 和 values_list()

如果估计只用到模型的几列数据的话，使用defer() 和 only()
如果后边用到了未估计到的数据，会执行额外的sql来补充

exists() 和 count() 都会执行一条sql，所以如果真对一个结果集合进行foreach操作的话
不如用with缓存结果集合 {% if emails %} 来判断 {{ emails|length }} 来统计结果，这样从前到后只用了一条sql语句
这点稍微有点变态
 
使用update() 和 delete() 去批量修改和删除对象，而不要用循环

尽量不要用order_by() 来排序querySet(), 如果要用的话，数据库尽量建立索引

创建一组数据用 bulk_create()

多对多模型，添加关系 my_band.members.add(me, my_friend) 一句执行
要优于 my_band.members.add(me) ，my_band.members.add(my_friend) 多句执行

select_for_update 会将查询出来的结果锁住直到修改，以保证不会出现读写脏数据

extra()可以帮助制作更复杂的查询，但是要小心，这个标签要被django弃用了